<?xml version="1.0" encoding="iso-8859-1"?>
<!-- ==========================================================================

 $Id$
   
=========================================================================== -->

<project default="distribution" name="sqlrest">

	<!-- ================================================================== -->
	<!-- Set project properties                                             -->
	<!-- ================================================================== -->
	<!-- Root directory of the project -->
	<property name="project.root" value="${basedir}"/>

	<!-- Directory where the distribution is build -->
	<property name="dist.dir" value="${project.root}/dist"/>

	<!-- Directory where the distribution is build -->
	<property name="release.dir" value="${dist.dir}/sqlrest-1.0"/>

	<!-- Directory where the external libs required by the project are located -->
	<!-- This directory MUST exist, it is used to build the default classpath  -->
	<property name="lib.dir" value="${project.root}/lib"/>

	<!-- Directory where scripts and external programs are located -->
	<property name="bin.dir" value="${project.root}/bin"/>

	<!-- Directory where Ant is located -->
	<property name="ant.dir" value="${bin.dir}/ant"/>

	<!-- Directory where Ant related libs are located -->
	<property name="ant.lib" value="${ant.dir}/lib"/>

	<!-- Directory where the sources of the project are located -->
	<property name="src.dir" value="${project.root}/src/java"/>

	<!-- Directories in which Ant builds the project -->
	<property name="build.dir" value="${project.root}/build"/>
	<property name="build.dest" value="${build.dir}/classes"/>
	<property name="build.testlog" value="${build.dir}/testlogs"/>
	<property name="build.testlog.html" value="${build.testlog}/html"/>


	<!-- Directory where the webapp is build -->
	<property name="webapps.dir" value="${build.dir}/webapps"/>

	<!-- Classes Directory inside the webdir -->
	<property name="webapp.dir" value="${webapps.dir}/sqlrest"/>

	<!-- Classes Directory inside the webdir -->
	<property name="web-inf.dir" value="${webapp.dir}/WEB-INF"/>

	<!-- Classes Directory inside the webdir -->
	<property name="webapp-classes.dir" value="${web-inf.dir}/classes"/>

	<!-- Directories in which the javadoc output of the project is placed -->
	<property name="doc.dir" value="${project.root}/docs"/>
	<property name="doc.javadoc" value="${doc.dir}/javadoc"/>

	<!-- Options for compiling java files -->
	<property name="debug" value="on"/>
	<property name="optimize" value="off"/>
	<property name="deprecation" value="off"/>

	<!-- Classpath used when compiling the project sources     -->
	<!-- Include all jar files which reside beneath ${lib.dir} -->
	<path id="compile.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<!-- Files which are excluded when compiling the project -->
	<property name="compile.excludes" value=""/>

	<!-- Files which are excluded when building the project package (jar files) -->
	<property name="package.excludes" value="**/*Test.class, **/*TestSuite.class"/>

	<!-- Packages which are included in the Javadoc documentation -->
	<!-- Include all classes which reside in 'de.oio' and beneath -->
	<property name="javadoc.packages" value="de.oio.*"/>

	<!-- ================================================================== -->
	<!-- Initialization target                                              -->
	<!-- ================================================================== -->
	<target name="init">
		<tstamp/>
		<echo message="---------- project '${ant.project.name}' [${TODAY}] ----------"/>
		<echo message=""/>
		<echo message="${ant.version}"/>
		<echo message=""/>
		<echo message="starting from directory '${basedir}'"/>
		<echo message=""/>
		<echo message="using buildfile '${ant.file}'"/>
		<echo message=""/>
		<echo message="--------------------------------------------------------------"/>
	</target>

	<!-- ================================================================== -->
	<!-- Creates the initial directory structure                            -->
	<!-- ================================================================== -->
	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${webapps.dir}"/>
		<mkdir dir="${webapp.dir}"/>
		<mkdir dir="${web-inf.dir}"/>		
		<copy todir="${web-inf.dir}">
		  <fileset dir="src/web/WEB-INF">
		  	<include name="**/*"/>
		  </fileset>
		</copy>
		<copy todir="${web-inf.dir}/lib">
		  <fileset dir="${basedir}/lib">
		  	<include name="**/hsqldb*.jar"/>
		  	<include name="**/log4j*.jar"/>
		  </fileset>
		</copy>	
		<copy todir="${web-inf.dir}/data">
		  <fileset dir="${basedir}/data">
		  	<include name="**/*"/>
		  </fileset>
		</copy>			
	</target>

	<!-- ================================================================== -->
	<!-- Compiles the source directory                                      -->
	<!-- ================================================================== -->
	<target name="compile" depends="prepare" description="compiles the source code">
		<javac srcdir="${src.dir}"
			destdir="${webapp-classes.dir}"
			debug="${debug}"
			optimize="${optimize}"
			deprecation="${deprecation}"
			excludes="${compile.excludes}">
			<classpath refid="compile.classpath"/>
		</javac>
		<copy todir="${webapp-classes.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<!-- ================================================================== -->
	<!-- Creates the API documentation                                      -->
	<!-- ================================================================== -->
	<target name="javadoc" depends="prepare" 
		description="generates the API documentation">
		<delete dir="${doc.javadoc}"/>
		<mkdir dir="${doc.dir}"/>
		<mkdir dir="${doc.javadoc}"/>
		<javadoc packagenames="${javadoc.packages}"
			sourcepath="${src.dir}"
			destdir="${doc.javadoc}"
			windowtitle="${ant.project.name} [${TODAY}] API"
			doctitle="${ant.project.name} [${TODAY}] API"
			bottom="Copyright &#169; Orientation in Objects GmbH. All Rights Reserved.">
			<classpath refid="compile.classpath"/>
		</javadoc>
	</target>

	<!-- ================================================================== -->
	<!-- Rebuilds all                                                       -->
	<!-- ================================================================== -->
	<target name="all" depends="clean, distribution" 
		description="performs clean, distribution"/>
	
	<!-- ================================================================== -->
	<!-- Cleans targets                                                     -->
	<!-- ================================================================== -->
	<target name="clean" description="cleans up the build directory">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>		
	</target>

	<!-- ================================================================== -->
	<!-- Runs available JUnit tests                                         -->
	<!-- ================================================================== -->
	<target name="test" depends="compile" description="runs available JUnit tests">

		<delete dir="${build.testlog}"/>
		<mkdir dir="${build.testlog}"/>
		<mkdir dir="${build.testlog.html}"/>

		<junit printsummary="yes" fork="yes" dir="${project.root}">
			<classpath refid="compile.classpath"/>
			<classpath>
				<pathelement location="${build.dest}"/>
			</classpath>
			<formatter type="xml"/>
			<test name="de.oio.util.FooUtilTestSuite" todir="${build.testlog}"/>
		</junit>

		<junitreport todir="${build.testlog}">
			<fileset dir="${build.testlog}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${build.testlog.html}"/>
		</junitreport>

	</target>
    
    <target name="distribution" depends="compile">

		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${release.dir}"/>
    	<mkdir dir="${release.dir}/webapps"/>
      
		<copy todir="${release.dir}/webapps">
		  <fileset dir="${webapps.dir}">
		  	<include name="sqlrest/**"/>
		  </fileset>
		</copy>			

		<copy todir="${release.dir}">
		  <fileset dir="${basedir}">
		  	<include name="docs/**"/>
		  </fileset>
		</copy>	
		
		<copy todir="${release.dir}">
		  <fileset dir="${basedir}">
		  	<include name="*.txt"/>
		  </fileset>
		</copy>							

    </target>

</project>
